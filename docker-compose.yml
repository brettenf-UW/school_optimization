services:
  # PostgreSQL Database
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: echelon
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Use memory limits for development on machines with limited RAM
    deploy:
      resources:
        limits:
          memory: 300M
      
  # Backend API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    depends_on:
      - db
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/echelon
      # Removed hardcoded credentials to use EC2 instance role
      - AWS_DEFAULT_REGION=us-west-2
      - S3_BUCKET_NAME=chico-high-school-optimization
      - COGNITO_USER_POOL_ID=us-west-2_gVCuWb3dQ
      - COGNITO_APP_CLIENT_ID=2vabalt8ij3kfp4tibhahce7ds
      # Enhanced logging for debugging
      - AWS_SDK_LOAD_CONFIG=1
      - AWS_STS_REGIONAL_ENDPOINTS=regional
      - DEBUG=1
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    command: >
      bash -c "python -m pip install awscli && 
      aws sts get-caller-identity > /app/aws_identity.log 2>&1 || echo 'IAM role check failed' &&
      aws s3 ls > /app/s3_access.log 2>&1 || echo 'S3 permissions check failed' &&
      uvicorn app:app --host 0.0.0.0 --port 8000 --reload"
    deploy:
      resources:
        limits:
          memory: 500M
      
  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    restart: always
    depends_on:
      - db
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          memory: 100M
          
  # Worker service for processing optimization jobs
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    depends_on:
      - db
      - api
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/echelon
      # Removed hardcoded credentials to use EC2 instance role
      - AWS_DEFAULT_REGION=us-west-2
      - S3_BUCKET_NAME=chico-high-school-optimization
      - SQS_QUEUE_URL=https://sqs.us-west-2.amazonaws.com/529088253685/echelon-jobs
      - SIMULATE_BATCH=false
      - BATCH_JOB_QUEUE=ec2-que
      - BATCH_JOB_DEFINITION=getting-started-ec2-job-definition
      # Enhanced logging for debugging
      - AWS_SDK_LOAD_CONFIG=1
      - DEBUG=1
      - LOG_LEVEL=DEBUG
    volumes:
      - ./backend:/app
    command: >
      bash -c "python -m pip install awscli && 
      aws sts get-caller-identity > /app/worker_aws_identity.log 2>&1 || echo 'Worker IAM role check failed' &&
      aws sqs list-queues > /app/sqs_access.log 2>&1 || echo 'SQS permissions check failed' &&
      aws batch describe-job-queues > /app/batch_access.log 2>&1 || echo 'Batch permissions check failed' &&
      python optimization_worker.py"
    deploy:
      resources:
        limits:
          memory: 300M
          
  # Frontend React application
  frontend:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
    ports:
      - "5173:5173"
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    environment:
      # EC2 public IP already configured
      - VITE_API_URL=http://54.202.229.226:8000/api
      - VITE_IS_DEV=true
      - VITE_AWS_REGION=us-west-2
      - VITE_S3_BUCKET=chico-high-school-optimization
    deploy:
      resources:
        limits:
          memory: 1G

volumes:
  postgres_data:
  localstack_data: